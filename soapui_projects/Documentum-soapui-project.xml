<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f5256690-9492-40ae-8e2c-edd21437f07e" activeEnvironment="Default" name="Documentum_rest" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="992da929-11a2-43cd-8cf4-f233ce7e12e8" port="8081" path="/" host="172.16.132.1" name="Documentum" docroot=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.mock.WsdlMockServiceDesktopPanel$LogListModel@maxSize">100</con:setting></con:settings><con:properties/><con:restMockAction name="/dctm-rest72/repositories/orclord/folders/0c000001816ffaba/documents" method="POST" resourcePath="/dctm-rest72/repositories/orclord/folders/0c000001816ffaba/documents" id="80f0e8bd-0e2d-45a2-b452-6811f199b8a1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="eea17320-d36a-4b76-bae6-eefb62a4304e" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{
   "name": "document",
   "type": "dm_document",
   "definition": "http://s00-0000-dm13:7001/dctm-rest72/repositories/orclord/types/dm_document",
   "properties": [{
      "object_name": "file.pdf",
      "r_object_type": "dm_document",
      "title": "",
      "subject": "",
      "authors": null,
      "keywords": null,
      "a_application_type": "",
      "a_status": "",
      "r_creation_date": "2018-02-20T13:17:13.000+00:00",
      "r_modify_date": "2018-02-20T13:17:13.000+00:00",
      "r_modifier": "CRMCollaboration",
      "r_access_date": null,
      "a_is_hidden": false,
      "i_is_deleted": false,
      "a_retention_date": null,
      "a_archive": false,
      "a_compound_architecture": "",
      "a_link_resolved": false
   }],
   "links": [
      {
         "rel": "self",
         "href": "http://172.16.132.1:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "edit",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/delete",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/parent-links",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/parent-links"
      },
      {
         "rel": "parent",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/folders/0c000001816ffaba"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/cabinet",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/cabinets/0c000001816ffaba"
      },
      {
         "rel": "contents",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/contents"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/primary-content",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/contents/content"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/checkout",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/lock"
      },
      {
         "rel": "version-history",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/versions"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/current-version",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/versions/current"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/relations",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/relations?related-object-id=0900000189ae216e&amp;related-object-role=any"
      }
   ]
}</con:responseContent><con:header><con:name>Location</con:name><con:value>http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/dctm-rest72/repositories/orclord/documents/0900000189ae216e/contents" method="POST" resourcePath="/dctm-rest72/repositories/orclord/documents/0900000189ae216e/contents" id="8a36f7cb-e709-487f-8caa-5604dd5f9ede"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2bc79997-8e31-468e-a8ad-c43eec04ceec" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{
   "name": "document",
   "type": "dm_document",
   "definition": "http://s00-0000-dm13:7001/dctm-rest72/repositories/orclord/types/dm_document",
   "properties": [{
      "object_name": "file.pdf",
      "r_object_type": "dm_document",
      "title": "",
      "subject": "",
      "authors": null,
      "keywords": null,
      "a_application_type": "",
      "a_status": "",
      "r_creation_date": "2018-02-20T13:17:13.000+00:00",
      "r_modify_date": "2018-02-20T13:17:13.000+00:00",
      "r_modifier": "CRMCollaboration",
      "r_access_date": null,
      "a_is_hidden": false,
      "i_is_deleted": false,
      "a_retention_date": null,
      "a_archive": false,
      "a_compound_architecture": "",
      "a_link_resolved": false
   }],
   "links": [
      {
         "rel": "self",
         "href": "http://172.16.132.128:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "edit",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/delete",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/parent-links",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/parent-links"
      },
      {
         "rel": "parent",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/folders/0c000001816ffaba"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/cabinet",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/cabinets/0c000001816ffaba"
      },
      {
         "rel": "contents",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/contents"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/primary-content",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/contents/content"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/checkout",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/lock"
      },
      {
         "rel": "version-history",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/versions"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/current-version",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/objects/0900000189ae216e/versions/current"
      },
      {
         "rel": "http://identifiers.emc.com/linkrel/relations",
         "href": "http://localhost:8081/dctm-rest72/repositories/orclord/relations?related-object-id=0900000189ae216e&amp;related-object-role=any"
      }
   ]
}</con:responseContent><con:header><con:name>link</con:name><con:value>http://localhost:8081/dctm-rest72/repositories/orclord/documents/0900000189ae216e</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>